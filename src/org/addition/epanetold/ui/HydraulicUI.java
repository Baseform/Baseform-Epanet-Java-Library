package org.addition.epanetold.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.looks.plastic.Plastic3DLookAndFeel;
import org.addition.epanetold.Epanet;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.math.BigDecimal;
import java.math.MathContext;
import java.nio.ByteBuffer;
import java.util.*;
import java.util.List;


public strictfp class HydraulicUI implements ActionListener {
    private JButton compareButton;
    private JTextField textAVRErr;
    private JButton buttonINP;
    private JPanel root;
    private JPanel panelA;
    private JPanel panelB;
    private JPanel panelC;
    private JPanel panelD;
    private JProgressBar pBar;
    private JPanel panelE;
    private JPanel panelF;
    private JTextField textINPFile;
    private JPanel panelD1;
    private JPanel panelD2;
    private JLabel labelFileB;
    private JTextField textFileB;
    private JButton buttonFileB;
    private JLabel labelFileA;
    private JTextField textFileA;
    private JButton buttonFileA;
    private JLabel labelINP;
    private JLabel labelAVRErr;
    private JButton stopButton;
    private JTable errTable;
    private JScrollPane errScrollPane;
    private JLabel labelMinVal;
    private JLabel labelMinRErr;
    private JTextField textMinVal;
    private JTextField textMinRErr;
    private JPanel panelG;
    private JButton buttonReport;

    JFrame frame;


    private File hydFileA = null;
    private File hydFileB = null;
    private File inpFile = null;

    private boolean runningFlag = false;

    DefaultTableModel errTableModel = null;

    static final ResourceBundle errorBundle = PropertyResourceBundle.getBundle("Error");
    public static int MAGIC_NUMBER = 516114521;

    DataInputStream mStream_1;
    DataInputStream mStream_2;

    Epanet epanet;

    boolean mLittleEndian_1;
    boolean mLittleEndian_2;

    int mVersionNumber;
    int mMaxNodes;
    int mMaxLinks;
    int mMaxTanks;
    int mMaxPumps;
    int mMaxValves;
    int mMaxDuration;

    int mErrorCount = 0;

    float mErrorAcumulator = 0.0f;


    float minFieldValue = 0.01f;
    float minRelativeError = 1.0f;

    private void createUIComponents() {
        root = new JPanel();
        panelA = new JPanel();
        panelB = new JPanel();
        panelC = new JPanel();
        panelD = new JPanel();
        panelE = new JPanel();
        panelF = new JPanel();
        panelD1 = new JPanel();
        panelD2 = new JPanel();
        panelG = new JPanel();
    }


    public HydraulicUI() {

        frame = new JFrame();
        String[] columnNames = {"Where",
                "Time",
                "Node",
                "Value A",
                "Value B",
                "Relative Error"};

        Object[][] data = {};
        errTableModel = new DefaultTableModel(data, columnNames);
        errTable = new JTable(errTableModel);

        $$$setupUI$$$();

        frame.setTitle("Hydraulic Comparator");
        frame.add(root);
        frame.pack();
        frame.setMinimumSize(new Dimension(585, 390));
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        buttonFileA.addActionListener(this);
        buttonFileB.addActionListener(this);
        buttonINP.addActionListener(this);
        stopButton.addActionListener(this);
        compareButton.addActionListener(this);
        buttonReport.addActionListener(this);

        errTable.setAutoCreateRowSorter(false);
    }

    public static void main(String[] args) throws UnsupportedLookAndFeelException {
        UIManager.setLookAndFeel(new Plastic3DLookAndFeel());
        HydraulicUI ui = new HydraulicUI();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(7, 1, new Insets(10, 10, 10, 10), -1, -1));
        panelA = new JPanel();
        panelA.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panelA, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textFileA = new JTextField();
        textFileA.setEnabled(false);
        panelA.add(textFileA, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonFileA = new JButton();
        buttonFileA.setText("Open");
        panelA.add(buttonFileA, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelFileA = new JLabel();
        labelFileA.setText("File A");
        panelA.add(labelFileA, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(50, -1), null, null, 0, false));
        panelB = new JPanel();
        panelB.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panelB, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelFileB = new JLabel();
        labelFileB.setText("File B");
        panelB.add(labelFileB, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(50, -1), null, null, 0, false));
        textFileB = new JTextField();
        textFileB.setEnabled(false);
        panelB.add(textFileB, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonFileB = new JButton();
        buttonFileB.setText("Open");
        panelB.add(buttonFileB, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelC = new JPanel();
        panelC.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panelC, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        compareButton = new JButton();
        compareButton.setEnabled(false);
        compareButton.setText("Compare");
        panelC.add(compareButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panelC.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panelC.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setEnabled(false);
        stopButton.setText("Stop");
        panelC.add(stopButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panelC.add(spacer3, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        panelD = new JPanel();
        panelD.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panelD, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelD1 = new JPanel();
        panelD1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelD.add(panelD1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelAVRErr = new JLabel();
        labelAVRErr.setText("Average error");
        panelD1.add(labelAVRErr, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textAVRErr = new JTextField();
        textAVRErr.setEnabled(false);
        panelD1.add(textAVRErr, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        panelD2 = new JPanel();
        panelD2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelD.add(panelD2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        pBar = new JProgressBar();
        root.add(pBar, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelE = new JPanel();
        panelE.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panelE, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelINP = new JLabel();
        labelINP.setText("INP File");
        panelE.add(labelINP, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(50, -1), null, null, 0, false));
        textINPFile = new JTextField();
        textINPFile.setEnabled(false);
        textINPFile.setText("Optional");
        panelE.add(textINPFile, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonINP = new JButton();
        buttonINP.setText("Open");
        panelE.add(buttonINP, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panelF = new JPanel();
        panelF.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panelF, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        errScrollPane = new JScrollPane();
        panelF.add(errScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        errTable.setFillsViewportHeight(false);
        errScrollPane.setViewportView(errTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private class TXTFilter extends FileFilter {

        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            String[] name_extension = f.getName().split("[.]");
            if (name_extension.length == 2) {
                if (name_extension[name_extension.length-1].equals("txt"))
                    return true;
            }
            return false;
        }

        public String getDescription() {
            return "Text File (*.txt)";
        }
    }

    private class INPFilter extends FileFilter {

        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            String[] name_extension = f.getName().split("[.]");
            if (name_extension.length == 2) {
                if (name_extension[name_extension.length-1].equals("inp"))
                    return true;
            }
            return false;
        }

        public String getDescription() {
            return "Epanet INP Files (*.inp)";
        }
    }

    private class BinFilter extends FileFilter {

        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }

            String[] name_extension = f.getName().split("[.]");
            if (name_extension.length == 2) {
                if (name_extension[name_extension.length-1].equals("bin"))
                    return true;
            }
            return false;
        }

        public String getDescription() {
            return "Hydraulic binary file (*.bin)";
        }
    }



    public void actionPerformed(ActionEvent e) {
        if (e.getSource().equals(buttonINP)) {
            final JFileChooser fc = new JFileChooser();
            fc.setFileFilter(new INPFilter());
            if (fc.showOpenDialog(frame) == 0) {
                inpFile = fc.getSelectedFile();
                textINPFile.setText(fc.getSelectedFile().getAbsolutePath());
            }
            checkCompareButton();
        } else if (e.getSource().equals(buttonFileA)) {
            final JFileChooser fc = new JFileChooser();
            fc.setFileFilter(new BinFilter());
            if (fc.showOpenDialog(frame) == 0) {
                hydFileA = fc.getSelectedFile();
                textFileA.setText(hydFileA.getAbsolutePath());
            }
            checkCompareButton();
        } else if (e.getSource().equals(buttonFileB)) {
            final JFileChooser fc = new JFileChooser();
            fc.setFileFilter(new BinFilter());
            if (fc.showOpenDialog(frame) == 0) {
                hydFileB = fc.getSelectedFile();
                textFileB.setText(fc.getSelectedFile().getAbsolutePath());
            }
            checkCompareButton();
        } else if (e.getSource().equals(compareButton)) {

            try{
                minFieldValue = Float.parseFloat(textMinVal.getText());
            }
            catch (Exception ex1){
                JOptionPane.showMessageDialog(frame, "Invalid minimum field value!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try{
                minRelativeError = Float.parseFloat(textMinRErr.getText());
            }
            catch (Exception ex2){
                JOptionPane.showMessageDialog(frame, "Invalid minimum relative error value!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            loadINP();
            if (openHydBinaries() && loadHeaders()) {
                runningFlag = true;
                compareButton.setEnabled(false);
                stopButton.setEnabled(true);
                mErrorCount = 0;
                while (errTableModel.getRowCount() > 0) {
                    errTableModel.removeRow(0);
                }
                errTable.setAutoCreateRowSorter(false);
                ComparatorClass comp = new ComparatorClass();
                comp.start();
            }
        } else if (e.getSource().equals(stopButton)) {
            runningFlag = false;
            stopButton.setEnabled(false);
            compareButton.setEnabled(true);

            mErrorCount = 0;
            mErrorAcumulator = 0.0f;
            errTable.setAutoCreateRowSorter(true);
            buttonReport.setEnabled(true);

        }
        else if(e.getSource().equals(buttonReport))
        {
            if(hydFileA==null || hydFileB==null)
                return;

            final JFileChooser fc = new JFileChooser();
            fc.setFileFilter(new TXTFilter());
            if(fc.showSaveDialog(frame)==0)
            {
                BufferedWriter writer = null;
                try{
                    String filename = fc.getSelectedFile().getAbsolutePath();


                    String ext =fetchExtension(filename);


                    if( ext==null || !ext.equals("txt")  )
                        filename+=".txt";

                    writer = new BufferedWriter(new FileWriter(filename));
                    writer.write("Hydraulic Comparator Report\n");
                    writer.write("\n");
                    writer.write(String.format("File A : %s\n",hydFileA.getName()));
                    writer.write(String.format("File B : %s\n",hydFileB.getName()));
                    writer.write("\n");
                    writer.write(String.format("Where\tTime\tNode\tValue A\tValue B\tRelative Error[%%]\n"));
                }
                catch (IOException ex)
                {
                    JOptionPane.showMessageDialog(frame, "Unable to open report file!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                for(int i = 0;i<errTableModel.getRowCount();i++ ){
                    Object where = errTableModel.getValueAt(i,0);
                    Object time = errTableModel.getValueAt(i,1);
                    Object node = errTableModel.getValueAt(i,2);
                    Object errA = errTableModel.getValueAt(i,3);
                    Object errB = errTableModel.getValueAt(i,4);
                    Object relError = errTableModel.getValueAt(i,5);

                     try{
                        writer.write(String.format("%s\t%d\t%s\t%f\t%f\t%s\n",(String)where,(Integer)time,(String)node,(Float)errA,(Float)errB,(String)relError ));
                     }
                     catch (IOException ex)
                     {
                         break;
                     }
                }

                try{
                    writer.close();
                }
                catch (IOException ex){}
            }
        }


    }

    public String fetchExtension(String filename){
        int id = filename.lastIndexOf('.');
        if(id==-1)
            return null;
        return filename.substring(id+1);
    }

    public void checkCompareButton() {
        if (hydFileA != null && hydFileB != null) {
            compareButton.setEnabled(true);
        }

    }



    float floatCompare(float f1, float f2) {
        BigDecimal bd1 = new BigDecimal(f1, MathContext.DECIMAL32);
        BigDecimal bd2 = new BigDecimal(f2, MathContext.DECIMAL32);
        if (bd1.equals(bd2)) return 0;
        BigDecimal diff = bd1.subtract(bd2).abs();
        BigDecimal epsilon = bd1.abs().max(bd2.abs());
        BigDecimal relativeDiff = diff.divide(epsilon, 6).setScale(6, BigDecimal.ROUND_DOWN);
        if (relativeDiff.doubleValue() == 0d)
            return 0f;
        else
            return relativeDiff.floatValue();
    }

    int readInt(DataInputStream stream, boolean LittleEndian) throws IOException {
        if (LittleEndian) {
            byte[] buff = new byte[4];
            stream.readFully(buff);
            return ((buff[3] & 0xff) << 24 | (buff[2] & 0xff) << 16 | (buff[1] & 0xff) << 8 | buff[0] & 0xff);
        } else
            return stream.readInt();

    }

    float readFloat(DataInputStream stream, boolean LittleEndian) throws IOException {
        if (LittleEndian) {
            byte[] buff = new byte[4];

            stream.readFully(buff);
            ByteBuffer bbuff = ByteBuffer.wrap(new byte[]{buff[3], buff[2], buff[1], buff[0]});

            return bbuff.getFloat();
        } else
            return stream.readFloat();
    }

    boolean loadINP() {

        int errCode = 0;
        if (inpFile == null)
            return true;

        epanet = new Epanet();

        if ((errCode = epanet.loadINP(inpFile.getAbsolutePath())) != 0) {
            JOptionPane.showMessageDialog(frame, errorBundle.getString("ERR" + errCode), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else
            return true;
    }

    boolean openHydBinaries() {
        try {
            mStream_1 = new DataInputStream(new BufferedInputStream(new FileInputStream(hydFileA)));
            mStream_2 = new DataInputStream(new BufferedInputStream(new FileInputStream(hydFileB)));
            return true;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error while trying to open the hydraulic binary files.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    boolean loadHeaders() {

        try {
            int magic1 = mStream_1.readInt();
            int magic2 = mStream_2.readInt();

            if (magic1 != MAGIC_NUMBER) mLittleEndian_1 = true;
            if (magic2 != MAGIC_NUMBER) mLittleEndian_2 = true;

            mVersionNumber = readInt(mStream_1, mLittleEndian_1);
            mMaxNodes = readInt(mStream_1, mLittleEndian_1);
            mMaxLinks = readInt(mStream_1, mLittleEndian_1);
            mMaxTanks = readInt(mStream_1, mLittleEndian_1);
            mMaxPumps = readInt(mStream_1, mLittleEndian_1);
            mMaxValves = readInt(mStream_1, mLittleEndian_1);
            mMaxDuration = readInt(mStream_1, mLittleEndian_1);

            int lVersionNumber = readInt(mStream_2, mLittleEndian_2);
            int lMaxNodes = readInt(mStream_2, mLittleEndian_2);
            int lMaxLinks = readInt(mStream_2, mLittleEndian_2);
            int lMaxTanks = readInt(mStream_2, mLittleEndian_2);
            int lMaxPumps = readInt(mStream_2, mLittleEndian_2);
            int lMaxValves = readInt(mStream_2, mLittleEndian_2);
            int lMaxDuration = readInt(mStream_2, mLittleEndian_2);

            if (lVersionNumber != mVersionNumber || lMaxNodes != mMaxNodes || mMaxLinks != lMaxLinks || mMaxTanks != lMaxTanks ||
                    mMaxPumps != lMaxPumps || mMaxValves != lMaxValves || mMaxDuration != lMaxDuration) {
                JOptionPane.showMessageDialog(frame, "Incompatible hydraulic files.", "Error", JOptionPane.OK_OPTION);
                return false;
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "IO read failure.", "Error", JOptionPane.OK_OPTION);
            return false;
        }

        return true;
    }

    private void closeHyd() {
        try {
            mStream_1.close();
            mStream_2.close();
        } catch (IOException e) {
        }
    }


    private void addError(String where, int hydTime, String node, float val1, float val2, float relative_error)
    {
        mErrorCount++;
        mErrorAcumulator+= relative_error;
        textAVRErr.setText(Float.toString(Math.abs(mErrorAcumulator/(float)(mErrorCount))*100.0f));

        errTableModel.addRow(new Object[]{where, new Integer(hydTime), node, new Float(val1), new Float(val2), Float.toString(relative_error * 100) + "%"});
    }

    private class ComparatorClass extends Thread {
        public void run() {
            int hydTime1 = 0;
            int hydTime2 = 0;
            List<Object[]> errList = new ArrayList<Object[]>();
            try {
                while (runningFlag && Math.max(hydTime1, hydTime2) < mMaxDuration) {

                    hydTime1 = readInt(mStream_1, mLittleEndian_1);
                    hydTime2 = readInt(mStream_2, mLittleEndian_2);
                    float temp_error = 0.0f;

                    // Node actual demand
                    errList.clear();
                    for (int i = 1; i <= mMaxNodes; i++) {
                        float val1 = readFloat(mStream_1, mLittleEndian_1);
                        float val2 = readFloat(mStream_2, mLittleEndian_2);
                        temp_error = floatCompare(val1, val2);

                        if (temp_error != 0 && val1 > minFieldValue &&  (temp_error*100 > minRelativeError)) {
                            String id = Integer.toString(i);
                            if (epanet != null) id = epanet.getNetwork().getNode(i).getId();
                            errList.add(new Object[]{id, val1, val2, temp_error});
                        }
                    }
                    Collections.sort(errList, new Comparator<Object[]>() {
                        public int compare(Object[] o1, Object[] o2) {
                            return -((Comparable) o1[3]).compareTo(o2[3]);
                        }
                    });
                    if (errList.size() > 20) errList = errList.subList(0, 20);
                    for (Object[] o : errList)
                        addError("Node Demand", hydTime1, (String) o[0], (Float) o[1], (Float) o[2], (Float) o[3]);

                    // Node heads
                    errList.clear();
                    for (int i = 1; i <= mMaxNodes; i++) {
                        float val1 = readFloat(mStream_1, mLittleEndian_1);
                        float val2 = readFloat(mStream_2, mLittleEndian_2);
                        temp_error = floatCompare(val1, val2);

                        if (temp_error != 0 && val1 > minFieldValue && (temp_error*100 > minRelativeError)) {
                            String id = Integer.toString(i);
                            if (epanet != null) id = epanet.getNetwork().getNode(i).getId();
                            errList.add(new Object[]{id, val1, val2, temp_error});
                        }
                    }
                    Collections.sort(errList, new Comparator<Object[]>() {
                        public int compare(Object[] o1, Object[] o2) {
                            return -((Comparable) o1[3]).compareTo(o2[3]);
                        }
                    });
                    if (errList.size() > 20) errList = errList.subList(0, 20);
                    for (Object[] o : errList)
                        addError("Node Head", hydTime1, (String) o[0], (Float) o[1], (Float) o[2], (Float) o[3]);

                    // Link flows
                    errList.clear();
                    for (int i = 1; i <= mMaxLinks; i++) {
                        float val1 = readFloat(mStream_1, mLittleEndian_1);
                        float val2 = readFloat(mStream_2, mLittleEndian_2);
                        temp_error = floatCompare(val1, val2);
                        if (temp_error != 0 && val1 > minFieldValue &&  (temp_error*100 > minRelativeError)) {
                            String id = Integer.toString(i);
                            if (epanet != null) id = epanet.getNetwork().getLink(i).getId();
                            errList.add(new Object[]{id, val1, val2, temp_error});
                        }
                    }
                    Collections.sort(errList, new Comparator<Object[]>() {
                        public int compare(Object[] o1, Object[] o2) {
                            return -((Comparable) o1[3]).compareTo(o2[3]);
                        }
                    });
                    if (errList.size() > 20) errList = errList.subList(0, 20);
                    for (Object[] o : errList)
                        addError("Link Flows", hydTime1, (String) o[0], (Float) o[1], (Float) o[2], (Float) o[3]);

                    // Link status
                    errList.clear();
                    for (int i = 1; i <= mMaxLinks; i++) {
                        float val1 = readFloat(mStream_1, mLittleEndian_1);
                        float val2 = readFloat(mStream_2, mLittleEndian_2);
                        temp_error = floatCompare(val1, val2);
                        if (temp_error != 0 && val1 > minFieldValue && (temp_error*100 > minRelativeError)) {
                            String id = Integer.toString(i);
                            if (epanet != null) id = epanet.getNetwork().getLink(i).getId();
                            errList.add(new Object[]{id, val1, val2, temp_error});
                        }
                    }
                    Collections.sort(errList, new Comparator<Object[]>() {
                        public int compare(Object[] o1, Object[] o2) {
                            return -((Comparable) o1[3]).compareTo(o2[3]);
                        }
                    });
                    if (errList.size() > 20) errList = errList.subList(0, 20);
                    for (Object[] o : errList)
                        addError("Link Status", hydTime1, (String) o[0], (Float) o[1], (Float) o[2], (Float) o[3]);


                    // Link settings
                    errList.clear();
                    for (int i = 1; i <= mMaxLinks; i++) {
                        float val1 = readFloat(mStream_1, mLittleEndian_1);
                        float val2 = readFloat(mStream_2, mLittleEndian_2);
                        temp_error = floatCompare(val1, val2);
                        if (temp_error != 0 && val1 > minFieldValue &&  (temp_error*100 > minRelativeError)) {
                            String id = Integer.toString(i);
                            if (epanet != null) id = epanet.getNetwork().getLink(i).getId();
                            errList.add(new Object[]{id, val1, val2, temp_error});
                        }
                    }
                    Collections.sort(errList, new Comparator<Object[]>() {
                        public int compare(Object[] o1, Object[] o2) {
                            return -((Comparable) o1[3]).compareTo(o2[3]);
                        }
                    });
                    if (errList.size() > 20) errList = errList.subList(0, 20);
                    for (Object[] o : errList)
                        addError("Link Settings", hydTime1, (String) o[0], (Float) o[1], (Float) o[2], (Float) o[3]);

                    int hydStep1 = readInt(mStream_1, mLittleEndian_1);
                    int hydStep2 = readInt(mStream_2, mLittleEndian_2);

                    pBar.setValue((int) ((hydTime1 / (float) mMaxDuration) * 100));
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                closeHyd();
                pBar.setValue(0);
                runningFlag = false;
                stopButton.setEnabled(false);
                compareButton.setEnabled(true);
                mErrorCount = 0;
                mErrorAcumulator = 0.0f;
                errTable.setAutoCreateRowSorter(true);
                buttonReport.setEnabled(true);
            }

        }

    }


}

